// tslint:disable
/**
 * DemoApp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: plachta.maciej@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApplicationError
 */
export interface ApplicationError {
    /**
     * 
     * @type {string}
     * @memberof ApplicationError
     */
    message: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationError
     */
    debug?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * checks if node is accessible
         * @param {boolean} [full] prints meta information about the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livenessProbeRequest: async (full?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/demoapp/.well-known/alive`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (full !== undefined) {
                localVarQueryParameter['full'] = full;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * checks if node is accessible
         * @param {boolean} [full] prints meta information about the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async livenessProbeRequest(full?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).livenessProbeRequest(full, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * checks if node is accessible
         * @param {boolean} [full] prints meta information about the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livenessProbeRequest(full?: boolean, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).livenessProbeRequest(full, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * checks if node is accessible
     * @param {boolean} [full] prints meta information about the node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public livenessProbeRequest(full?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).livenessProbeRequest(full, options).then((request) => request(this.axios, this.basePath));
    }

}


