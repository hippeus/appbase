// Package restv1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package restv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ApplicationError defines model for ApplicationError.
type ApplicationError struct {
	Debug   *bool  `json:"debug,omitempty"`
	Message string `json:"message"`
}

// LivenessProbeResponse defines model for LivenessProbeResponse.
type LivenessProbeResponse map[string]interface{}

// LivenessProbeRequestParams defines parameters for LivenessProbeRequest.
type LivenessProbeRequestParams struct {

	// prints meta information about the node
	Full *bool `json:"full,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/demoapp/.well-known/alive)
	LivenessProbeRequest(ctx echo.Context, params LivenessProbeRequestParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LivenessProbeRequest converts echo context to params.
func (w *ServerInterfaceWrapper) LivenessProbeRequest(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LivenessProbeRequestParams
	// ------------- Optional query parameter "full" -------------

	err = runtime.BindQueryParameter("form", true, false, "full", ctx.QueryParams(), &params.Full)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter full: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LivenessProbeRequest(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/v1/demoapp/.well-known/alive", wrapper.LivenessProbeRequest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xTwW7bOhD8FWHfO8qS0qAXnRqgRVGgh6LXICjW9JremOQyXEpJEOjfC9J27KY59kZQ",
	"q5nhzOwLGPFRAoWsML6Amh15rMebGB0bzCzhS0qSyl1MEillpjqxofVkyyE/R4IR1iKOMMDSgidVtHTx",
	"UXPiYGFZWkj0MHGiDYy3r4N37WlQ1vdkcgH5zjMFUv2RZE0/SaMEvYQ8TRZMDlspn4yEjCaXI3lkByNE",
	"h2aXsfNomO4/2XLdGfHQQkBfgHYcI01aODNnV64+k5ebGKGFmZKyBBhh6K66oQxJpICRYYTrbugGaCFi",
	"3lVPeozcz1f9hrxgjH33SM6t9kEeQ4+O56rfUj74pyZxzAd0syOz14a3TZANNawNGkOqvHYElTPVML5t",
	"YHxrzcNEmquMhJ4yJYXx9i1BTByyNp4yNsWu5Cteg2uZcpN3VImheAkjPEyUns8WbSfnoD32473Ml7sS",
	"7CGj6sSHYTgFQqG+F8+N6u+1aHq5APw/0RZG+K8/N7I/1rF/vwk1+D/f+GpdtXpp4eNw/c9U/LUR7whQ",
	"SjOlJpOPkjA9N1PAGdlhSXFZ6h9PK8HIKyMbshRqUpZCifewZVZ+RTT7uj/F0zxfQQsOg50Od1+lFiKv",
	"OCiMNQptNZI5NrGEvbevHSwQ/UFYZyl0tvyeMdUaHhWXxXwj44KwMtRXrvCJRc88E/eaTG29pXCiLHVY",
	"fgcAAP//XwFGXlwEAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
